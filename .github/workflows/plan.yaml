name: Infra CI/CD
on:
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write
  pull-requests: write

concurrency:
  group: terraform

jobs:
  plan:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.fork != true

    strategy:
      fail-fast: false
      matrix:
        env:
          - dev
          - prod

    environment: ${{ matrix.env }}-viewer

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ matrix.env == 'prod' && '840011577241' || '720364425367' }}/locations/global/workloadIdentityPools/github/providers/curioswitch
          project_id: ${{ matrix.env == 'prod' && 'tasuke-prod' || 'tasuke-dev' }}
          service_account: terraform-viewer@${{ matrix.env == 'prod' && 'tasuke-prod' || 'tasuke-dev' }}.iam.gserviceaccount.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - run: pnpm install
      
      - run: pnpm run synth

      - name: Terraform Init
        run: terraform init
        working-directory: cdktf.out/stacks/${{ matrix.env }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: cdktf.out/stacks/${{ matrix.env }}

      - uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lines = process.env.RESULT
              .replace(new RegExp('\\n' + '-'.repeat(72) + '[\\s\\S]*'), '')
              .split('\n')
              .filter(line => !line.includes('Refreshing state...'))

            #### Terraform Plan (${{ matrix.env }}) ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${ lines.join('\n') }\`\`\`

            </details>

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan (${{ matrix.env }})')
            })

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
